{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","search","bind","handleTermChange","this","onSearch","state","term","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUri","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","find","savedTrack","push","filteredTracks","filter","trackURIs","i","j","trackIndex","indexOf","splice","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04b4e091.chunk.js","sourcesContent":["import SearchBar from \"../Components/SearchBar/SearchBar\";\n\nconst clientId = '8c6a907c549644e79e612e3c7f08c368';\nconst redirectUri = 'http://localhost:3000';\n// const redirectUri = 'http://gidgod-jammming.surge.sh';\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        // check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            \n            // This clears the parameters, allowing us to grab a new access token when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUri = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUri;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        })\n    },\n\n    savePlaylist(playlistName, trackUris) {\n        if (!playlistName || !trackUris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: playlistName})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n\n                return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                }).then(response => response.json()\n                ).then(jsonResponse => {\n                    const playlistId = jsonResponse.id;\n                })\n            })\n        });\n    }\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n    }\n\n    // Render method has the onClick attribute added to the button element. This isn't covered by the tasklist.\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    renderAction() {\n        if (this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => {\n                        return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\n            </div>\n        );\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue={this.props.playlistName} onChange={this.handleNameChange} />\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        );\n    }\n}\n\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    let filteredTracks = tracks.filter(savedTrack => savedTrack.id !== track.id);\n    this.setState({playlistTracks: filteredTracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    }).then(() => {\n      let playlistTracks = this.state.playlistTracks;\n      let searchResults = this.state.searchResults;\n      for (let i = 0; i < playlistTracks.length; i++) {\n        for (let j = 0; j < searchResults.length; j++) {\n          if (playlistTracks[i].id === searchResults[j].id) {\n            let trackIndex = searchResults.indexOf(searchResults[j]);\n            searchResults.splice(trackIndex, 1);\n            this.setState({searchResults: searchResults});\n          }\n        }\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName} onNameChange={this.updatePlaylistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}